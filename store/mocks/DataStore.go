// Copyright 2016 Mender Software AS
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        http://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.

// generate with:
// mockery -name=DataStore

package mocks

import log "github.com/mendersoftware/go-lib-micro/log"
import mock "github.com/stretchr/testify/mock"
import model "github.com/mendersoftware/deviceauth/model"
import store "github.com/mendersoftware/deviceauth/store"

// DataStore is an autogenerated mock type for the DataStore type
type DataStore struct {
	mock.Mock
}

// AddAuthSet provides a mock function with given fields: set
func (_m *DataStore) AddAuthSet(set model.AuthSet) error {
	ret := _m.Called(set)

	var r0 error
	if rf, ok := ret.Get(0).(func(model.AuthSet) error); ok {
		r0 = rf(set)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddDevice provides a mock function with given fields: d
func (_m *DataStore) AddDevice(d model.Device) error {
	ret := _m.Called(d)

	var r0 error
	if rf, ok := ret.Get(0).(func(model.Device) error); ok {
		r0 = rf(d)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddToken provides a mock function with given fields: t
func (_m *DataStore) AddToken(t model.Token) error {
	ret := _m.Called(t)

	var r0 error
	if rf, ok := ret.Get(0).(func(model.Token) error); ok {
		r0 = rf(t)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteAuthSetsForDevice provides a mock function with given fields: devid
func (_m *DataStore) DeleteAuthSetsForDevice(devid string) error {
	ret := _m.Called(devid)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(devid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteDevice provides a mock function with given fields: id
func (_m *DataStore) DeleteDevice(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteToken provides a mock function with given fields: jti
func (_m *DataStore) DeleteToken(jti string) error {
	ret := _m.Called(jti)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(jti)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteTokenByDevId provides a mock function with given fields: dev_id
func (_m *DataStore) DeleteTokenByDevId(dev_id string) error {
	ret := _m.Called(dev_id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(dev_id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAuthSetByDataKey provides a mock function with given fields: data, key
func (_m *DataStore) GetAuthSetByDataKey(data string, key string) (*model.AuthSet, error) {
	ret := _m.Called(data, key)

	var r0 *model.AuthSet
	if rf, ok := ret.Get(0).(func(string, string) *model.AuthSet); ok {
		r0 = rf(data, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.AuthSet)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(data, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAuthSetById provides a mock function with given fields: id
func (_m *DataStore) GetAuthSetById(id string) (*model.AuthSet, error) {
	ret := _m.Called(id)

	var r0 *model.AuthSet
	if rf, ok := ret.Get(0).(func(string) *model.AuthSet); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.AuthSet)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAuthSetsForDevice provides a mock function with given fields: devid
func (_m *DataStore) GetAuthSetsForDevice(devid string) ([]model.AuthSet, error) {
	ret := _m.Called(devid)

	var r0 []model.AuthSet
	if rf, ok := ret.Get(0).(func(string) []model.AuthSet); ok {
		r0 = rf(devid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.AuthSet)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(devid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDeviceById provides a mock function with given fields: id
func (_m *DataStore) GetDeviceById(id string) (*model.Device, error) {
	ret := _m.Called(id)

	var r0 *model.Device
	if rf, ok := ret.Get(0).(func(string) *model.Device); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Device)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDeviceByIdentityData provides a mock function with given fields: idata
func (_m *DataStore) GetDeviceByIdentityData(idata string) (*model.Device, error) {
	ret := _m.Called(idata)

	var r0 *model.Device
	if rf, ok := ret.Get(0).(func(string) *model.Device); ok {
		r0 = rf(idata)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Device)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(idata)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDevices provides a mock function with given fields: skip, limit
func (_m *DataStore) GetDevices(skip uint, limit uint) ([]model.Device, error) {
	ret := _m.Called(skip, limit)

	var r0 []model.Device
	if rf, ok := ret.Get(0).(func(uint, uint) []model.Device); ok {
		r0 = rf(skip, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Device)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint, uint) error); ok {
		r1 = rf(skip, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetToken provides a mock function with given fields: jti
func (_m *DataStore) GetToken(jti string) (*model.Token, error) {
	ret := _m.Called(jti)

	var r0 *model.Token
	if rf, ok := ret.Get(0).(func(string) *model.Token); ok {
		r0 = rf(jti)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Token)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(jti)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAuthSet provides a mock function with given fields: orig, mod
func (_m *DataStore) UpdateAuthSet(orig model.AuthSet, mod model.AuthSetUpdate) error {
	ret := _m.Called(orig, mod)

	var r0 error
	if rf, ok := ret.Get(0).(func(model.AuthSet, model.AuthSetUpdate) error); ok {
		r0 = rf(orig, mod)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateDevice provides a mock function with given fields: d
func (_m *DataStore) UpdateDevice(d *model.Device) error {
	ret := _m.Called(d)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Device) error); ok {
		r0 = rf(d)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UseLog provides a mock function with given fields: l
func (_m *DataStore) UseLog(l *log.Logger) {
	_m.Called(l)
}

var _ store.DataStore = (*DataStore)(nil)
