image: golang:1.10

cache:
  paths:
    - /apt-cache
    - /go/src/github.com
    - /go/src/golang.org
    - /go/src/google.golang.org
    - /go/src/gopkg.in
    - node_modules

variables:
  DOCKER_HOST: tcp://docker:2375/
  DOCKER_REPOSITORY: mendersoftware/deviceauth

services:
  - docker:dind
  - mongo

stages:
  - test_prep
  - test
  - build
  - publish

.template_prep_tests: &test_tool_setup
  before_script:
    - mkdir -p /go/src/github.com/mendersoftware /go/src/_/builds
    - cp -r $CI_PROJECT_DIR /go/src/github.com/mendersoftware/deviceauth
    - ln -s /go/src/github.com/mendersoftware /go/src/_/builds/mendersoftware
    - cd /go/src/github.com/mendersoftware/deviceauth
    # Install code coverage tooling & cyclomatic dependency analysis tool
    - go get -u github.com/axw/gocov/gocov golang.org/x/tools/cmd/cover github.com/fzipp/gocyclo

test:prepare_acceptance:
  image: docker
  stage: test_prep
  script:
    - docker build -f Dockerfile.acceptance-testing -t $DOCKER_REPOSITORY:prtest .;
    - docker save $DOCKER_REPOSITORY:prtest > tests_image.tar
    - docker build -t $DOCKER_REPOSITORY:pr .
    - docker run --rm --entrypoint "/bin/sh" -v $(pwd):/binary $DOCKER_REPOSITORY:pr -c "cp /usr/bin/deviceauth /binary"
    - docker build -t testing -f tests/Dockerfile tests
    - docker save testing > acceptance_testing_image.tar
  artifacts:
    expire_in: 2w
    paths:
      - tests_image.tar
      - acceptance_testing_image.tar
      - deviceauth

test:acceptance_tests:
  image: tiangolo/docker-with-compose
  services:
    - docker:dind
  stage: test
  dependencies:
    - test:prepare_acceptance
  script:
    - apk add git bash
    - git clone https://github.com/mendersoftware/integration.git
    - mv integration/extra/travis-testing/* tests/
    - mv docs/* tests/
    - mv deviceauth tests/
    - docker load -i tests_image.tar
    - docker load -i acceptance_testing_image.tar
    - TESTS_DIR=$(pwd)/tests $(pwd)/tests/run-test-environment acceptance $(pwd)/integration $(pwd)/tests/docker-compose.yml ;
    - TESTS_DIR=$(pwd)/tests $(pwd)/tests/run-test-environment acceptance $(pwd)/integration $(pwd)/tests/docker-compose-tenant.yml ;
  artifacts:
    expire_in: 2w
    paths:
      - tests/coverage-acceptance.txt
  tags:
    - docker

test:static:
  stage: test
  <<: *test_tool_setup
  dependencies: []
  script:
    - curl -sL https://deb.nodesource.com/setup_11.x | bash -
    - apt-get -qq update
    - apt-get install -qy --allow-unauthenticated python3-pip nodejs
    - pip3 install pyyaml
    - npm install -g swagger-cli
    # Get our own Swagger verifier
    - wget https://raw.githubusercontent.com/mendersoftware/autodocs/master/verify_docs.py
    # Test if code was formatted with 'go fmt'
    # Command will format code and return modified files
    # fail if any have been modified.
    - if [ -n "$(go fmt)" ]; then echo 'Code is not formatted with "go fmt"'; false; fi
    # Perform static code analysys
    - go vet `go list ./... | grep -v vendor`
    # Fail builds when the cyclomatic complexity reaches 15 or more
    - gocyclo -over 15 `find . -iname '*.go' | grep -v 'vendor' | grep -v '_test.go'`
    # Verify that the Swagger docs are valid
    - swagger-cli validate docs/*.yml
    # Verify that the Swagger docs follow the autodeployment requirements
    - if test "$(ls -A docs)"; then python3 verify_docs.py `find docs -name "*.yml"`; fi

test:unit:
  stage: test
  <<: *test_tool_setup
  dependencies: []
  variables:
    DEVICEAUTH_MONGO: mongo
  script:
    - apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 2930ADAE8CAF5059EE73BB4B58712A2291FA4AD5
    - wget http://security.debian.org/debian-security/pool/updates/main/o/openssl/libssl1.0.0_1.0.1t-1+deb8u12_amd64.deb
    - dpkg -i libssl1.0.0_1.0.1t-1+deb8u12_amd64.deb
    - echo "deb http://repo.mongodb.org/apt/debian jessie/mongodb-org/3.4 main" | tee /etc/apt/sources.list.d/mongodb-org-3.4.list
    - apt-get -qq update
    - apt-get install -qy --allow-unauthenticated mongodb-org-server=3.4.6 liblzma-dev
    - go list ./... | grep -v vendor | xargs -n1 -I {} -P 4 go test -v -covermode=atomic -coverprofile=../../../{}/coverage.txt {} || exit $? ;
    - mkdir -p tests/unit-coverage && find . -name 'coverage.txt' -exec cp --parents {} ./tests/unit-coverage \;
    - tar -cvf $CI_PROJECT_DIR/unit-coverage.tar tests/unit-coverage
  artifacts:
    expire_in: 2w
    paths:
      - unit-coverage.tar

build:
  image: docker
  stage: build
  script:
    - docker build -t $DOCKER_REPOSITORY:pr .
    - docker save $DOCKER_REPOSITORY:pr > image.tar
  artifacts:
    expire_in: 2w
    paths:
      - image.tar
  tags:
    - docker

publish:docs:
  stage: publish
  script:
    - echo "publishing docs"

publish:tests:
  image: alpine
  stage: publish
  before_script:
    - apk add --no-cache bash curl findutils git
  dependencies:
    - test:acceptance_tests
    - test:unit
  script:
    - tar -xvf unit-coverage.tar
    - bash -c "bash <(curl -s https://codecov.io/bash) -Z -F unittests -s ./tests/unit-coverage"
    - bash -c "bash <(curl -s https://codecov.io/bash) -Z -F acceptance -f ./tests/coverage-acceptance.txt"

publish:build:
  image: docker
  stage: publish
  dependencies:
    - build
  script:
    - echo "publishing image to docker hub"
    # - docker load -i image.tar
    # - if [ ! -z "$CI_COMMIT_TAG" ]; then export IMAGE_TAG=$CI_COMMIT_TAG; else export IMAGE_TAG=$CI_COMMIT_REF_NAME; fi ;
    # - docker tag $DOCKER_REPOSITORY:pr $DOCKER_REPOSITORY:$IMAGE_TAG ;
    # - docker login --username=$DOCKER_HUB_USERNAME --password=$DOCKER_HUB_PASSWORD ;
    # - docker push $DOCKER_REPOSITORY:$IMAGE_TAG ;
  except:
    - master
  tags:
    - docker

publish:build:master:
  image: docker
  stage: publish
  dependencies:
    - build
  script:
    - echo "publishing image to docker hub"
    # - docker load -i image.tar
    # - export COMMIT_TAG="$CI_COMMIT_REF_NAME"_"$CI_COMMIT_SHA";
    # - docker tag $DOCKER_REPOSITORY:pr $DOCKER_REPOSITORY:$COMMIT_TAG;
    # - docker push $DOCKER_REPOSITORY:$COMMIT_TAG;
  only:
    - master
  tags:
    - docker
